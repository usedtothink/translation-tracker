@startuml

actor Client
participant "API Gateway/Lambda"
participant ArchiveTranslationClientActivity
participant ArchiveTranslationCaseActivity
participant TranslationClientDao
database    DynamoDB

Client -> "API Gateway/Lambda" : HTTP Request
"API Gateway/Lambda" -> ArchiveTranslationClientActivity : ArchiveTranslationClientRequest

ArchiveTranslationClientActivity -> TranslationClientDao : archiveTranslationClient(customerId, translationClientId)
TranslationClientDao -> DynamoDB : load(translationClientId)

alt if DynamoDB returns null
    DynamoDB --> TranslationClientDao: return with no item data
    TranslationClientDao --> ArchiveTranslationClientActivity: throw TranslationClientNotFoundException
    ArchiveTranslationClientActivity --> "API Gateway/Lambda": propagate TranslationClientNotFoundException
    "API Gateway/Lambda" --> Client : return 400 response
else else continue
end

DynamoDB --> TranslationClientDao : return TranslationClient data

alt if customerId does not match the customerId of the saved TranslationClient
    TranslationClientDao --> ArchiveTranslationClientActivity: throw SecurityException
    ArchiveTranslationClientActivity --> "API Gateway/Lambda": propagate SecurityException
    "API Gateway/Lambda" --> Client : return 400 response
else else continue
end

TranslationClientDao -> TranslationClientDao : prepend "archived" to \n the translationClientId

TranslationClientDao -> DynamoDB : save(archivedClient)
DynamoDB --> TranslationClientDao : return 200 response
TranslationClientDao -> DynamoDB : delete(originalClient)
DynamoDB --> TranslationClientDao : return 200 response


TranslationClientDao --> ArchiveTranslationClientActivity : return the original TranslationClient object
ArchiveTranslationClientActivity --> "API Gateway/Lambda" : return ArchiveTranslationClientResult
"API Gateway/Lambda" --> Client : return 200 response with ArchiveTranslationClientResult data

@enduml